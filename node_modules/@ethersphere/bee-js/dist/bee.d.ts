/// <reference types="node" />
import type { Readable } from 'stream';
import type { Tag, FileData, Reference, UploadOptions, PublicKey, AddressPrefix, PssMessageHandler, PssSubscription, BeeResponse, CollectionUploadOptions, FileUploadOptions } from './types';
import { AxiosRequestConfig } from 'axios';
import { FeedReader, FeedWriter } from './feed';
import { EthAddress } from './chunk/signer';
import { FeedType } from './feed/type';
import { Signer } from './chunk/signer';
import { SOCReader, SOCWriter } from './chunk/soc';
import { Topic } from './feed/topic';
/**
 * The Bee class provides a way of interacting with the Bee APIs based on the provided url
 *
 * @param url URL of a running Bee node
 */
export declare class Bee {
    readonly url: string;
    constructor(url: string);
    /**
     * Upload data to a Bee node
     *
     * @param data    Data to be uploaded
     * @param options Aditional options like tag, encryption, pinning, content-type
     *
     * @returns reference is a content hash of the data
     */
    uploadData(data: string | Uint8Array, options?: UploadOptions): Promise<Reference>;
    /**
     * Download data as a byte array
     *
     * @param reference Bee data reference
     */
    downloadData(reference: Reference): Promise<Uint8Array>;
    /**
     * Download data as a readable stream
     *
     * @param reference Bee data reference
     * @param axiosOptions optional - alter default options of axios HTTP client
     */
    downloadReadableData(reference: Reference, axiosOptions?: AxiosRequestConfig): Promise<Readable>;
    /**
     * Upload single file to a Bee node
     *
     * @param data    Data or file to be uploaded
     * @param name    Name of the uploaded file (optional)
     * @param options Aditional options like tag, encryption, pinning, content-type
     *
     * @returns reference is a content hash of the file
     */
    uploadFile(data: string | Uint8Array | Readable | File, name?: string, options?: FileUploadOptions): Promise<Reference>;
    /**
     * Download single file as a byte array
     *
     * @param reference Bee file reference
     */
    downloadFile(reference: Reference): Promise<FileData<Uint8Array>>;
    /**
     * Download single file as a readable stream
     *
     * @param reference Bee file reference
     */
    downloadReadableFile(reference: Reference): Promise<FileData<Readable>>;
    /**
     * Upload collection of files to a Bee node
     *
     * Uses the FileList API from the browser.
     *
     * @param fileList list of files to be uploaded
     * @param options Additional options like tag, encryption, pinning
     *
     * @returns reference of the collection of files
     */
    uploadFiles(fileList: FileList | File[], options?: CollectionUploadOptions): Promise<Reference>;
    /**
     * Upload collection of files to a Bee node
     *
     * Uses the `fs` module of Node.js
     *
     * @param dir the path of the files to be uploaded
     * @param recursive specifies if the directory should be recursively uploaded
     * @param options Additional options like tag, encryption, pinning
     *
     * @returns reference of the collection of files
     */
    uploadFilesFromDirectory(dir: string, recursive?: boolean, options?: CollectionUploadOptions): Promise<Reference>;
    /**
     * Download single file as a byte array from collection given using the path
     *
     * @param reference Bee collection reference
     * @param path Path of the requested file in the collection
     *
     * @returns file in byte array with metadata
     */
    downloadFileFromCollection(reference: Reference, path?: string): Promise<FileData<Uint8Array>>;
    /**
     * Download single file as a readable stream from collection given using the path
     *
     * @param reference Bee collection reference
     * @param path Path of the requested file in the collection
     * @param axiosOptions optional - alter default options of axios HTTP client
     *
     * @returns file in readable stream with metadata
     */
    downloadReadableFileFromCollection(reference: Reference, path?: string, axiosOptions?: AxiosRequestConfig): Promise<FileData<Readable>>;
    /**
     * Create new tag
     */
    createTag(): Promise<Tag>;
    /**
     * Retrieve tag information from Bee node
     *
     * @param tag UID or tag object to be retrieved
     */
    retrieveTag(tagUid: number | Tag): Promise<Tag>;
    /**
     * Pin file with given reference
     *
     * @param reference Bee file reference
     */
    pinFile(reference: Reference): Promise<BeeResponse>;
    /**
     * Unpin file with given reference
     *
     * @param reference Bee file reference
     */
    unpinFile(reference: Reference): Promise<BeeResponse>;
    /**
     * Pin collection with given reference
     *
     * @param reference Bee collection reference
     */
    pinCollection(reference: Reference): Promise<BeeResponse>;
    /**
     * Unpin collection with given reference
     *
     * @param reference Bee collection reference
     */
    unpinCollection(reference: Reference): Promise<BeeResponse>;
    /**
     * Pin data with given reference
     *
     * @param reference Bee data reference
     */
    pinData(reference: Reference): Promise<BeeResponse>;
    /**
     * Unpin data with given reference
     *
     * @param reference Bee data reference
     */
    unpinData(reference: Reference): Promise<BeeResponse>;
    /**
     * Send to recipient or target with Postal Service for Swarm
     *
     * @param topic Topic name
     * @param target Target message address prefix
     * @param data Message to be sent
     * @param recipient Recipient public key
     *
     */
    pssSend(topic: string, target: AddressPrefix, data: string | Uint8Array, recipient?: PublicKey): Promise<BeeResponse>;
    /**
     * Subscribe to messages with Postal Service for Swarm
     *
     * @param topic Topic name
     * @param handler Message handler interface
     *
     * @returns Subscription to a given topic
     */
    pssSubscribe(topic: string, handler: PssMessageHandler): PssSubscription;
    /**
     * Receive message with Postal Service for Swarm
     *
     * Because sending a PSS message is slow and CPU intensive,
     * it is not supposed to be used for general messaging but
     * most likely for setting up an encrypted communication
     * channel by sending a one-off message.
     *
     * This is a helper function to wait for exactly one message to
     * arrive and then cancel the subscription. Additionally a
     * timeout can be provided for the message to arrive or else
     * an error will be thrown.
     *
     * @param topic Topic name
     * @param timeoutMsec Timeout in milliseconds
     *
     * @returns Message in byte array
     */
    pssReceive(topic: string, timeoutMsec?: number): Promise<Uint8Array>;
    /**
     * Create feed manifest chunk and return the reference to it
     *
     * @param type    The type of the feed, can be 'epoch' or 'sequence'
     * @param topic   Topic in hex or bytes
     * @param owner   Owner's ethereum address in hex or bytes
     */
    createFeedManifest(type: FeedType, topic: Topic | Uint8Array | string, owner: EthAddress | Uint8Array | string): Promise<Reference>;
    /**
     * Make a new feed reader for downloading feed updates
     *
     * @param type    The type of the feed, can be 'epoch' or 'sequence'
     * @param topic   Topic in hex or bytes
     * @param owner   Owner's ethereum address in hex or bytes
     */
    makeFeedReader(type: FeedType, topic: Topic | Uint8Array | string, owner: EthAddress | Uint8Array | string): FeedReader;
    /**
     * Make a new feed writer for updating feeds
     *
     * @param type    The type of the feed, can be 'epoch' or 'sequence'
     * @param topic   Topic in hex or bytes
     * @param signer  The signer's private key or a Signer instance that can sign data
     */
    makeFeedWriter(type: FeedType, topic: Topic | Uint8Array | string, signer: Signer | Uint8Array | string): FeedWriter;
    /**
     * Make a new feed topic from a string
     *
     * Because the topic has to be 32 bytes long this function
     * hashes the input string to create a topic.
     *
     * @param topic The input string
     */
    makeFeedTopic(topic: string): Topic;
    /**
     * Returns an object for reading single owner chunks
     *
     * @param ownerAddress The ethereum address of the owner
     */
    makeSOCReader(ownerAddress: EthAddress | Uint8Array | string): SOCReader;
    /**
     * Returns an object for reading and writing single owner chunks
     *
     * @param signer The signer's private key or a Signer instance that can sign data
     */
    makeSOCWriter(signer: Signer | Uint8Array | string): SOCWriter;
}
