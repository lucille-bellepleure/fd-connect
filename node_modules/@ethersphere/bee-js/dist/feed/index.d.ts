import { EthAddress, Signer } from '../chunk/signer';
import { Identifier } from '../chunk/soc';
import { FeedUpdateOptions, FetchFeedUpdateResponse } from '../modules/feed';
import { Reference, ReferenceResponse, UploadOptions } from '../types';
import { Bytes } from '../utils/bytes';
import { HexString } from '../utils/hex';
import { Topic } from './topic';
import { Owner } from '../chunk/owner';
import { FeedType } from './type';
export interface Epoch {
    time: number;
    level: number;
}
export declare type IndexBytes = Bytes<8>;
export declare type Index = number | Epoch | IndexBytes | string;
export interface FeedUploadOptions extends UploadOptions, FeedUpdateOptions {
}
declare type PlainChunkReference = Bytes<32>;
declare type EncryptedChunkReference = Bytes<64>;
export declare type ChunkReference = PlainChunkReference | EncryptedChunkReference;
export interface FeedUpdate {
    timestamp: number;
    reference: ChunkReference;
}
/**
 * FeedReader is an interface for downloading feed updates
 */
export interface FeedReader {
    readonly type: FeedType;
    readonly owner: Owner;
    readonly topic: Topic;
    /**
     * Download the latest feed update
     */
    download(options?: FeedUpdateOptions): Promise<FetchFeedUpdateResponse>;
}
/**
 * FeedWriter is an interface for updating feeds
 */
export interface FeedWriter extends FeedReader {
    /**
     * Upload a new feed update
     *
     * @param reference The reference to be stored in the new update
     * @param options   Additional options like `at`
     *
     * @returns The reference of the new update
     */
    upload(reference: ChunkReference | Reference, options?: FeedUploadOptions): Promise<ReferenceResponse>;
}
export declare function isEpoch(epoch: unknown): epoch is Epoch;
export declare function makeSequentialFeedIdentifier(topic: Topic, index: number): Identifier;
export declare function makeFeedIndexBytes(s: string): IndexBytes;
export declare function makeFeedIdentifier(topic: Topic, index: Index): Identifier;
export declare function uploadFeedUpdate(url: string, signer: Signer, topic: Topic, index: Index, reference: ChunkReference, options?: FeedUploadOptions): Promise<ReferenceResponse>;
export declare function findNextIndex(url: string, owner: HexString, topic: HexString, options?: FeedUpdateOptions): Promise<string>;
export declare function updateFeed(url: string, signer: Signer, topic: Topic, reference: ChunkReference, options?: FeedUploadOptions): Promise<ReferenceResponse>;
export declare function verifyChunkReference(data: Uint8Array): ChunkReference;
export declare function downloadFeedUpdate(url: string, owner: EthAddress, topic: Topic, index: Index): Promise<FeedUpdate>;
export declare function makeFeedReader(url: string, type: FeedType, topic: Topic, owner: Owner): FeedReader;
export declare function makeFeedWriter(url: string, type: FeedType, topic: Topic, signer: Signer): FeedWriter;
export {};
