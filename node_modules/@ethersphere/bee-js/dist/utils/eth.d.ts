import { BrandedString } from '../types';
import { HexString } from './hex';
export declare type HexEthAddress = BrandedString<'HexEthAddress'>;
export declare type OverlayAddress = BrandedString<'OverlayAddress'>;
/**
 * Check if is valid ethereum address
 *
 * Pretty much typed version from web3js
 * https://github.com/ChainSafe/web3.js/blob/1.x/packages/web3-utils/src/utils.js
 *
 * @param address  Ethereum address as hex string
 *
 * @return True if is valid eth address
 */
export declare function isEthAddress(address: string | HexString | HexEthAddress): address is HexEthAddress;
/**
 * Convert big-endian hex or number to little-endian.
 * Note: Before conversion it is automatically padded to even length hexstring
 *
 * @param bigEndian Big-endian hex string or number to convert
 * @param pad       Length to which the string should be padded before conversion (defaul: 2)
 *
 * @return little-endian encoded hexstring
 */
export declare function toLittleEndian(bigEndian: number | string | HexString, pad?: number): HexString | never;
/**
 * Convert little-endian hex or number to big-endian
 * Note: Before conversion it is automatically padded to even length hexstring
 *
 * @param littleEndian Little-endian hex string or number to convert
 * @param pad          Length to which the string should be padded before conversion (defaul: 2)
 *
 * @return big-endian encoded hexstring
 */
export declare function fromLittleEndian(littleEndian: number | string | HexString, pad?: number): HexString | never;
/**
 * Get swarm overlay address from public ethereum address and swarm network id
 *
 * @param ethAddress  Public ethereum address
 * @param networkId   Swarm network id
 *
 * @return Swarm overlay address
 */
export declare function ethToSwarmAddress(ethAddress: string | HexString | HexEthAddress, networkId?: number): OverlayAddress;
