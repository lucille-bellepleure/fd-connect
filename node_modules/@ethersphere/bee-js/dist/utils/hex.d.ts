import { BrandedString } from '../types';
/**
 * Nominal type to represent hex strings
 */
export declare type HexString = BrandedString<'HexString'>;
/**
 * Strips the '0x' hex prefix from a string

 * @param hex string input
 */
export declare function stripHexPrefix<T extends string>(hex: T): T;
/**
 * Converts a hex string to Uint8Array
 *
 * @param hex string input
 */
export declare function hexToBytes(hex: HexString): Uint8Array;
/**
 * Converts array of number or Uint8Array to hex string.
 *
 * Optionally provides '0x' prefix.
 *
 * @param bytes       The input array
 * @param withPrefix  Provides '0x' prefix when true (default: false)
 */
export declare function bytesToHex(bytes: Uint8Array, withPrefix?: boolean): HexString;
/**
 * Converst integer number to hex string.
 *
 * Optionally provides '0x' prefix or padding
 *
 * @param int         The positive integer to be converted
 * @param withPrefix  Provides '0x' prefix when true (default: false)
 */
export declare function intToHex(int: number, withPrefix?: boolean): HexString;
/**
 * Type guard for HexStrings
 *
 * @param s string input
 */
export declare function isHexString(s: string): s is HexString;
/**
 * Verifies if the provided input is a HexString.
 *
 * @param s string input
 *
 * @returns HexString or throws error
 */
export declare function verifyHex(s: string): HexString | never;
