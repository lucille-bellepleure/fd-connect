/// <reference types="node" />
import type { Readable } from 'stream';
import type { CollectionUploadOptions, Collection, FileData } from '../types';
import type { AxiosRequestConfig } from 'axios';
/**
 * Creates array in the format of Collection with Readable streams prepared for upload.
 *
 * @param dir absolute path to the directory
 * @param recursive flag that specifies if the directory should be recursively walked and get files in those directories.
 */
export declare function buildCollection(dir: string, recursive?: boolean): Promise<Collection<Uint8Array>>;
export declare function buildFileListCollection(fileList: FileList | File[]): Promise<Collection<Uint8Array>>;
/**
 * Upload collection of files to a Bee node
 *
 * @param url     Bee URL
 * @param data    Data in Collection format to be uploaded
 * @param options Additional options like tag, encryption, pinning
 */
export declare function upload(url: string, data: Collection<Uint8Array>, options?: CollectionUploadOptions): Promise<string>;
/**
 * Download single file as a buffer from Collection given using the path
 *
 * @param url  Bee URL
 * @param hash Bee Collection hash
 * @param path Path of the requested file in the Collection
 */
export declare function download(url: string, hash: string, path?: string): Promise<FileData<Uint8Array>>;
/**
 * Download single file as a buffer from Collection given using the path
 *
 * @param url  Bee URL
 * @param hash Bee Collection hash
 * @param path Path of the requested file in the Collection
 * @param axiosOptions optional - alter default options of axios HTTP client
 */
export declare function downloadReadable(url: string, hash: string, path?: string, axiosOptions?: AxiosRequestConfig): Promise<FileData<Readable>>;
