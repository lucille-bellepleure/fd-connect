import { Reference, ReferenceResponse } from '../types';
import { FeedType } from '../feed/type';
export interface CreateFeedOptions {
    type?: FeedType;
}
export interface FeedUpdateOptions {
    /**
     * Specifies the start date as unix time stamp
     */
    at?: number;
    /**
     * Can be 'epoch' or 'sequence' (default: 'sequence')
     */
    type?: FeedType;
}
interface FeedUpdateHeaders {
    feedIndex: string;
    feedIndexNext: string;
}
export interface FetchFeedUpdateResponse extends ReferenceResponse, FeedUpdateHeaders {
}
/**
 * Create an initial feed root manifest
 *
 * @param url         Bee URL
 * @param owner       Owner's ethereum address in hex
 * @param topic       Topic in hex
 * @param options     Additional options, like type (default: 'sequence')
 */
export declare function createFeedManifest(url: string, owner: string, topic: string, options?: CreateFeedOptions): Promise<Reference>;
/**
 * Find and retrieve feed update
 *
 * The feed consists of updates. This endpoint looks up an
 * update that matches the provided parameters and returns
 * the reference it contains along with its index and the
 * index of the subsequent update.
 *
 * @param url         Bee URL
 * @param owner       Owner's ethereum address in hex
 * @param topic       Topic in hex
 * @param options     Additional options, like index, at, type
 */
export declare function fetchFeedUpdate(url: string, owner: string, topic: string, options?: FeedUpdateOptions): Promise<FetchFeedUpdateResponse>;
export {};
