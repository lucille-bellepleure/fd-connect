import { Bytes } from '../utils/bytes';
/**
 * Ethereum compatible signing and recovery
 */
export declare type Signature = Bytes<65>;
export declare type PrivateKey = Bytes<32>;
export declare type PublicKey = Bytes<32> | Bytes<64>;
export declare type EthAddress = Bytes<20>;
declare type SyncSigner = (digest: Uint8Array) => Signature;
declare type AsyncSigner = (digest: Uint8Array) => Promise<Signature>;
/**
 * Interface for implementing Ethereum compatible signing.
 *
 * @property sign     The sign function that can be sync or async
 * @property address  The ethereum address of the signer
 */
export declare type Signer = {
    sign: SyncSigner | AsyncSigner;
    address: EthAddress;
};
/**
 * Sign the data with a signer.
 *
 * Adds the ethereum prefix to the data before signing.
 *
 * @param data    The data to be signed
 * @param signer  The signer used for signing
 *
 * @returns the signature
 */
export declare function sign(data: Uint8Array, signer: Signer): Signature | Promise<Signature>;
/**
 * The default signer function that can be used for integrating with
 * other applications (e.g. wallets).
 *
 * @param digest      The data to be signed
 * @param privateKey  The private key used for signing the data
 */
export declare function defaultSign(digest: Uint8Array, privateKey: PrivateKey): Signature;
/**
 * Recovers the ethereum address from a given signature.
 *
 * Can be used for verifying a piece of data when the public key is
 * known.
 *
 * @param signature The signature
 * @param digest    The digest of the data
 *
 * @returns the recovered address
 */
export declare function recoverAddress(signature: Signature, digest: Uint8Array): EthAddress;
/**
 * Creates a default singer object that can be used when the private
 * key is known.
 *
 * @param privateKey The private key
 */
export declare function makeDefaultSigner(privateKey: PrivateKey): Signer;
export declare function isSigner(signer: unknown): signer is Signer;
export declare function makeSigner(signer: Signer | Uint8Array | string | unknown): Signer;
export {};
