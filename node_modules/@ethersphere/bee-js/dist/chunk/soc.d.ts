import { Bytes } from '../utils/bytes';
import { EthAddress, Signature, Signer } from './signer';
import { Chunk, ChunkAddress } from './cac';
import { ReferenceResponse, UploadOptions } from '../types';
export declare type Identifier = Bytes<32>;
/**
 * With single owner chunks, a user can assign arbitrary data to an
 * address and attest chunk integrity with their digital signature.
 *
 * This interface extends the Chunk interface so it has the same
 * properties, but the address calculation is based on the identifier
 * and the owner of the chunk.
 */
export interface SingleOwnerChunk extends Chunk {
    identifier: () => Identifier;
    signature: () => Signature;
    owner: () => EthAddress;
}
/**
 * Interface for downloading single owner chunks
 */
export interface SOCReader {
    /**
     * Downloads a single owner chunk
     *
     * @param identifier  The identifier of the chunk
     */
    download: (identifier: Identifier) => Promise<SingleOwnerChunk>;
}
/**
 * Interface for downloading and uploading single owner chunks
 */
export interface SOCWriter extends SOCReader {
    /**
     * Uploads a single owner chunk
     *
     * @param identifier  The identifier of the chunk
     * @param data        The chunk payload data
     * @param options     Upload options
     */
    upload: (identifier: Identifier, data: Uint8Array, options?: UploadOptions) => Promise<ReferenceResponse>;
}
/**
 * Verifies if the data is a valid single owner chunk
 *
 * @param data    The chunk data
 * @param address The address of the single owner chunk
 *
 * @returns a single owner chunk or throws error
 */
export declare function verifySingleOwnerChunk(data: Uint8Array, address: ChunkAddress): SingleOwnerChunk;
export declare function makeSOCAddress(identifier: Identifier, address: EthAddress): ChunkAddress;
/**
 * Creates a single owner chunk object
 *
 * @param chunk       A chunk object used for the span and payload
 * @param identifier  The identifier of the chunk
 * @param signer      The singer interface for signing the chunk
 */
export declare function makeSingleOwnerChunk(chunk: Chunk, identifier: Identifier, signer: Signer): Promise<SingleOwnerChunk>;
/**
 * Helper function to upload a chunk.
 *
 * It uses the Chunk API and calculates the address before uploading.
 *
 * @param url       The url of the Bee service
 * @param chunk     A chunk object
 * @param options   Upload options
 */
export declare function uploadSingleOwnerChunk(url: string, chunk: SingleOwnerChunk, options?: UploadOptions): Promise<ReferenceResponse>;
/**
 * Helper function to create and upload SOC.
 *
 * @param url         The url of the Bee service
 * @param signer      The singer interface for signing the chunk
 * @param identifier  The identifier of the chunk
 * @param data        The chunk data
 * @param options
 */
export declare function uploadSingleOwnerChunkData(url: string, signer: Signer, identifier: Identifier, data: Uint8Array, options?: UploadOptions): Promise<ReferenceResponse>;
/**
 * Helper function to download SOC.
 *
 * @param url           The url of the Bee service
 * @param ownerAddress  The singer interface for signing the chunk
 * @param identifier    The identifier of the chunk
 */
export declare function downloadSingleOwnerChunk(url: string, ownerAddress: EthAddress, identifier: Identifier): Promise<SingleOwnerChunk>;
