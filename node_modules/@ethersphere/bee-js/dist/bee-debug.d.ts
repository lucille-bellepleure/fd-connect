import type { PublicKey, Address, Peer, BalanceResponse, PeerBalance, ChequebookAddressResponse, ChequebookBalanceResponse, LastChequesResponse, LastChequesForPeerResponse, LastCashoutActionResponse, CashoutResponse, DepositTokensResponse, WithdrawTokensResponse, Settlements, AllSettlements } from './types';
/**
 * The BeeDebug class provides a way of interacting with the Bee debug APIs based on the provided url
 *
 * @param url URL of a running Bee node
 */
export declare class BeeDebug {
    readonly url: string;
    constructor(url: string);
    getOverlayAddress(): Promise<Address>;
    getPssPublicKey(): Promise<PublicKey>;
    /**
     * Get list of peers for this node
     */
    getPeers(): Promise<Peer[]>;
    /**
     * Get the balances with all known peers including prepaid services
     */
    getAllBalances(): Promise<BalanceResponse>;
    /**
     * Get the balances with a specific peer including prepaid services
     *
     * @param address Swarm address of peer
     */
    getPeerBalance(address: Address): Promise<PeerBalance>;
    /**
     * Get the past due consumption balances with all known peers
     */
    getPastDueConsumptionBalances(): Promise<BalanceResponse>;
    /**
     * Get the past due consumption balance with a specific peer
     *
     * @param address Swarm address of peer
     */
    getPastDueConsumptionPeerBalance(address: Address): Promise<PeerBalance>;
    /**
     * Get the address of the chequebook contract used
     */
    getChequebookAddress(): Promise<ChequebookAddressResponse>;
    /**
     * Get the balance of the chequebook
     */
    getChequeubookBalance(): Promise<ChequebookBalanceResponse>;
    /**
     * Get last cheques for all peers
     */
    getLastCheques(): Promise<LastChequesResponse>;
    /**
     * Get last cheques for the peer
     *
     * @param address  Swarm address of peer
     */
    getLastChequesForPeer(address: Address): Promise<LastChequesForPeerResponse>;
    /**
     * Get last cashout action for the peer
     *
     * @param address  Swarm address of peer
     */
    getLastCashoutAction(address: Address): Promise<LastCashoutActionResponse>;
    /**
     * Cashout the last cheque for the peer
     *
     * @param address  Swarm address of peer
     */
    cashoutLastCheque(address: string): Promise<CashoutResponse>;
    /**
     * Deposit tokens from overlay address into chequebook
     *
     * @param amount  Amount of tokens to deposit
     */
    depositTokens(amount: number): Promise<DepositTokensResponse>;
    /**
     * Withdraw tokens from the chequebook to the overlay address
     *
     * @param amount  Amount of tokens to withdraw
     */
    withdrawTokens(amount: number): Promise<WithdrawTokensResponse>;
    /**
     * Get amount of sent and received from settlements with a peer
     *
     * @param address  Swarm address of peer
     */
    getSettlements(address: Address): Promise<Settlements>;
    /**
     * Get settlements with all known peers and total amount sent or received
     */
    getAllSettlements(): Promise<AllSettlements>;
}
