import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var HexValue;

(function (HexValue) {
  HexValue["_"] = "";
})(HexValue || (HexValue = {}));

export function isHexValue(value) {
  return typeof value === 'string' && value.startsWith('0x');
}
export function fromHexValue(input) {
  return Buffer.from(input.substr(2), 'hex');
}
export function toHexValue(value) {
  if (isHexValue(value)) {
    return value;
  }

  var buffer = Buffer.isBuffer(value) ? value : Buffer.from(value);
  return '0x' + buffer.toString('hex');
}
export var Hex =
/*#__PURE__*/
function () {
  Hex.from = function from(input) {
    return new Hex(input);
  };

  function Hex(inputValue) {
    _defineProperty(this, "input", void 0);

    _defineProperty(this, "hexValue", void 0);

    if (inputValue instanceof Hex) {
      return inputValue;
    }

    if (isHexValue(inputValue)) {
      this.input = {
        type: 'hex',
        value: inputValue
      };
      this.hexValue = inputValue;
    } else if (typeof inputValue === 'string') {
      this.input = {
        type: 'string',
        value: inputValue
      };
      this.hexValue = toHexValue(inputValue);
    } else if (Array.isArray(inputValue)) {
      this.input = {
        type: 'bytesArray',
        value: inputValue
      };
      this.hexValue = toHexValue(inputValue);
    } else if (Buffer.isBuffer(inputValue)) {
      this.input = {
        type: 'buffer',
        value: inputValue
      };
      this.hexValue = toHexValue(inputValue);
    } else if (typeof inputValue === 'object') {
      this.input = {
        type: 'object',
        value: inputValue
      };
      this.hexValue = toHexValue(JSON.stringify(inputValue));
    } else {
      throw new Error('Invalid input');
    }
  }

  var _proto = Hex.prototype;

  _proto.equals = function equals(other) {
    return Hex.from(other).value === this.hexValue;
  };

  _proto.toBuffer = function toBuffer() {
    switch (this.input.type) {
      case 'buffer':
        return this.input.value;

      case 'bytesArray':
      case 'string':
        return Buffer.from(this.input.value);

      case 'hex':
        return fromHexValue(this.input.value);

      case 'object':
        return Buffer.from(JSON.stringify(this.input.value));

      default:
        return Buffer.alloc(0);
    }
  };

  _proto.toBytesArray = function toBytesArray() {
    return this.input.type === 'bytesArray' ? this.input.value : Array.from(this.toBuffer());
  };

  _proto.toObject = function toObject() {
    return this.input.type === 'object' ? this.input.value : JSON.parse(this.toString());
  };

  _proto.toString = function toString() {
    switch (this.input.type) {
      case 'buffer':
        return this.input.value.toString();

      case 'bytesArray':
        return Buffer.from(this.input.value).toString();

      case 'hex':
        return fromHexValue(this.input.value).toString();

      case 'object':
        return JSON.stringify(this.input.value);

      case 'string':
        return this.input.value;

      default:
        return '';
    }
  };

  _createClass(Hex, [{
    key: "value",
    get: function get() {
      return this.hexValue;
    }
  }]);

  return Hex;
}();