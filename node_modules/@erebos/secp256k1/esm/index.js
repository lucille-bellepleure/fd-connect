import elliptic from 'elliptic';
export var ec = new elliptic.ec('secp256k1');
export function createKeyPair(privKey) {
  return privKey ? ec.keyFromPrivate(privKey, 'hex') : ec.genKeyPair();
}
export function createPublic(pubKey) {
  return ec.keyFromPublic(pubKey, 'hex');
}
export function sign(input, privKey) {
  var sig = ec.sign(input, privKey, {
    canonical: true
  });
  return [].concat(sig.r.toArray('be', 32), sig.s.toArray('be', 32), [sig.recoveryParam || 0]);
}
export function verify(input, signature, pubKey) {
  var sig;

  if (Array.isArray(signature)) {
    var buf = Buffer.from(signature);
    sig = {
      r: buf.slice(0, 32),
      s: buf.slice(32, 64)
    };
  } else {
    sig = signature;
  }

  var key = typeof pubKey === 'string' ? createPublic(pubKey) : pubKey;
  return ec.verify(input, sig, key);
}